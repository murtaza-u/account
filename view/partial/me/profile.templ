package me

import "github.com/murtaza-u/ellipsis/view/partial/icon"

templ Profile(avatarURL string) {
	@ChangeAvatar(avatarURL, map[string]error{})
}

templ ChangeAvatar(avatarURL string, err map[string]error) {
	@crop()
	<form
		action="/"
		method="post"
		class="w-full lg:w-1/2 space-y-2"
		enctype="multipart/form-data"
	>
		<div class="avatar">
			<div class="w-24 mask mask-circle">
				if avatarURL != "" {
					<img alt="Avatar" src={ avatarURL }/>
				} else {
					<img alt="Avatar" src="/static/default-user.svg"/>
				}
			</div>
		</div>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Pick a file</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				id="avatar-input"
				type="file"
				name="avatar"
				class={
					"file-input file-input-bordered w-full",
					templ.KV("file-input-error", err["avatar"] != nil),
				}
				accept="image/*"
			/>
			<div class="label">
				if err["avatar"] != nil {
					<span class="label-text-alt text-error first-letter:uppercase">
						{ err["avatar"].Error() }
					</span>
				}
				<span class="label-text-alt">File size must be less than 512KB</span>
			</div>
		</label>
		<div class="flex items-center justify-end">
			<button class="my-4 btn btn-primary w-full md:w-fit">
				Change Avatar
			</button>
		</div>
		@initCropper()
	</form>
}

templ crop() {
	<dialog id="crop-modal" class="modal modal-bottom sm:modal-middle">
		<div class="modal-box">
			<div class="w-full">
				<div>
					<img
						id="crop-image"
						class="block w-full max-w-full"
						src="/static/default-user.svg"
						alt="User avatar"
					/>
				</div>
			</div>
			<div class="modal-action">
				<button class="btn" onclick={ closeModal() }>Cancel</button>
				<button id="crop-button" class="btn btn-primary">Crop</button>
			</div>
		</div>
	</dialog>
}

script closeModal() {
	const modal = document.getElementById("crop-modal")
	modal.classList.remove("modal-open")
}

script initCropper() {
	function setupCropper(fileInput, cropButton, croppedImage, cropModal) {
		let cropper = null
		let croppable = false
		let fname = null

		fileInput.addEventListener("change", (e) => {
			if (cropper) {
				cropper.destroy();
				cropper = null;
			}

			if (fname) {
				fname = null
			}

			const files = e.target.files;
			if (!files || files.length === 0) {
				return;
			}

			cropModal.classList.add("modal-open")

			function done(url) {
				e.target.value = null;
				croppedImage.src = url;
				cropper = new Cropper(croppedImage, {
					aspectRatio: 1,
					dragMode: "move",
					cropBoxMovable: true,
					cropBoxResizable: false,
					toggleDragModeOnDblclick: false,
					responsive: true,
					zoomable: false,
					center: true,
					data: {
						width: 360,
						height: 360,
					},
					ready: () => {
						croppable = true;
					},
				});
			}

			const file = files[0];
			fname = file.name

			if (URL) {
				done(URL.createObjectURL(file));
				return;
			}

			if (FileReader) {
				const reader = new FileReader();
				reader.onload = () => done(reader.result);
				reader.readAsDataURL(file);
				return;
			}
		})

		cropButton.addEventListener("click", () => {
			if (!croppable) return;
			const croppedCanvas = cropper.getCroppedCanvas();
			const roundedCanvas = getRoundedCanvas(croppedCanvas);
			roundedImage = document.createElement("img");
			roundedImage.src = roundedCanvas.toDataURL();
			roundedImage.style = "width: 360px;";
			createFile(roundedImage.src, fileInput, fname).then(
				() => cropModal.classList.remove("modal-open")
			);
		})
	}

	const input = document.getElementById("avatar-input")
	const btn = document.getElementById("crop-button")
	const image = document.getElementById("crop-image")
	const modal = document.getElementById("crop-modal")
	setupCropper(input, btn, image, modal)
}

type ChangePasswordParams struct {
	OldPassword        string `form:"old_password"`
	NewPassword        string `form:"new_password"`
	NewConfirmPassword string `form:"new_confirm_password"`
	HasPswd            bool
}

templ ChangePassword(values ChangePasswordParams, err map[string]error, success bool) {
	if (success) {
		<div class="toast toast-start">
			<div class="alert alert-success">
				@icon.Trophy()
				<span>Password Changed</span>
			</div>
		</div>
	}
	<form
		class="w-full lg:w-1/2 space-y-2"
		hx-post="/change-password"
		hx-swap="outerHTML"
		hx-boost="true"
		hx-indicator="#spinner"
	>
		if values.HasPswd {
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Old Password</span>
					<span class="label-text-alt text-error text-xl">*</span>
				</div>
				<input
					required
					name="old_password"
					type="password"
					minlength="8"
					maxlength="70"
					value={ values.OldPassword }
					placeholder="********"
					class={
						"input input-bordered w-full",
						templ.KV("input-error", err["old_password"] != nil),
					}
				/>
				if err["old_password"] != nil {
					<div class="label">
						<span class="label-text-alt text-error first-letter:uppercase">
							{ err["old_password"].Error() }
						</span>
					</div>
				}
			</label>
		}
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">New Password</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				required
				name="new_password"
				type="password"
				minlength="8"
				maxlength="70"
				value={ values.NewPassword }
				placeholder="********"
				class={
					"input input-bordered w-full",
					templ.KV("input-error", err["new_password"] != nil),
				}
			/>
			<div class="label">
				if err["new_password"] != nil {
					<span class="label-text-alt text-error first-letter:uppercase">
						{ err["new_password"].Error() }
					</span>
				}
				<span class="label-text-alt">Must be less than 70 characters</span>
			</div>
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">New Confirm Password</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				required
				name="new_confirm_password"
				type="password"
				minlength="8"
				maxlength="70"
				value={ values.NewConfirmPassword }
				placeholder="********"
				class={
					"input input-bordered w-full",
					templ.KV("input-error", err["new_confirm_password"] != nil),
				}
			/>
			<div class="label">
				if err["new_confirm_password"] != nil {
					<span class="label-text-alt text-error first-letter:uppercase">
						{ err["new_confirm_password"].Error() }
					</span>
				}
				<span class="label-text-alt">Must be same as above</span>
			</div>
		</label>
		<div class="flex items-center justify-end">
			<button class="my-4 btn btn-primary w-full md:w-fit">
				Change Password
				<span
					id="spinner"
					class="ml-1 hidden loading loading-spinner"
				></span>
			</button>
		</div>
	</form>
}
