package console

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/murtaza-u/account/internal/sqlc"
	"github.com/murtaza-u/account/view/partial/icon"
)

templ Apps(apps []sqlc.Client) {
	<div hx-boost="true" class="my-10 flex items-center justify-end">
		<a href="/console/app/create" class="btn btn-primary">
			@icon.Hammer()
			Create Application
		</a>
	</div>
	<ul class="space-y-4" hx-boost="true">
		for _, app := range apps {
			<li class="flex justify-between items-center py-2 px-4 border-b-2 border-x-2 rounded-lg shadow-sm">
				<a href={ templ.SafeURL(fmt.Sprintf("/console/app/%s", app.ID)) } class="block">
					<div class="flex items-center space-x-4">
						<div class="avatar">
							<div class="w-8 h-8 rounded">
								<img src={ getPictureURL(app.PictureUrl) }/>
							</div>
						</div>
						<h2 class="text-lg hover:underline">{ app.Name }</h2>
					</div>
				</a>
				<div class="hidden items-center lg:flex">
					Client ID:
					<span class="ml-1 bg-base-200 p-1 font-mono">
						{ app.ID }
					</span>
				</div>
			</li>
		}
	</ul>
}

type AppParams struct {
	ID                string        `param:"id"`
	Name              string        `form:"name"`
	LogoURL           string        `form:"logo_url"`
	CallbackURLs      string        `form:"callback_urls"`
	IDTokenExpiration time.Duration `form:"id_token_expiration"`
}

templ AppCreateForm(values AppParams, err map[string]error) {
	<div id="app-create-container" class="w-full lg:w-2/3 bg-base-100">
		<form
			class="block w-full space-y-2"
			hx-post="/console/app/create"
			hx-swap="innerHTML"
			hx-target="#app-create-container"
		>
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Name</span>
					<span class="label-text-alt text-error text-xl">*</span>
				</div>
				<input
					required
					name="name"
					type="text"
					minlength="2"
					maxlength="50"
					value={ values.Name }
					placeholder="Add name for application"
					class={
						"input input-bordered w-full",
						templ.KV("input-error", err["name"] != nil),
					}
				/>
				if err["name"] != nil {
					<div class="label">
						<span class="label-text-alt text-error">
							{ err["name"].Error() }
						</span>
					</div>
				}
			</label>
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Logo</span>
				</div>
				<input
					name="logo_url"
					type="url"
					maxlength="100"
					value={ values.LogoURL }
					placeholder="https://path.to/my_logo.png"
					class={
						"input input-bordered w-full",
						templ.KV("input-error", err["logo"] != nil),
					}
				/>
				<div class="label">
					if err["logo"] != nil {
						<span class="label-text-alt text-error">
							{ err["logo"].Error() }
						</span>
					}
					<span class="label-text-alt">
						If none is set,
						<a
							class="link link-primary"
							target="_blank"
							href="/static/default-logo.png"
						>
							this
						</a> default logo wil be used.
					</span>
				</div>
			</label>
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">Callback URLs</span>
					<span class="label-text-alt text-error text-xl">*</span>
				</div>
				<input
					required
					name="callback_urls"
					type="text"
					maxlength="1000"
					value={ values.CallbackURLs }
					placeholder="https://example.com, https://localhost:8000"
					class={
						"input input-bordered w-full",
						templ.KV("input-error", err["callback_urls"] != nil),
					}
				/>
				<div class="label">
					if err["callback_urls"] != nil {
						<span class="label-text-alt text-error">
							{ err["callback_urls"].Error() }
						</span>
					}
					<span class="label-text-alt">Comma(,) seperated urls</span>
				</div>
			</label>
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text">ID token expiration</span>
					<span class="label-text-alt text-error text-xl">*</span>
				</div>
				<input
					required
					name="id_token_expiration"
					type="number"
					value={ fmt.Sprintf("%d", values.IDTokenExpiration) }
					min="300"
					max="86400"
					class={
						"input input-bordered w-full", templ.KV("input-error",
							err["id_token_expiration"] != nil),
					}
				/>
				<div class="label">
					if err["id_token_expiration"] != nil {
						<span class="label-text-alt text-error">
							{ err["id_token_expiration"].Error() }
						</span>
					}
					<span class="label-text-alt">In seconds</span>
				</div>
			</label>
			<div class="flex items-center justify-end">
				<button class="btn btn-primary w-full md:w-fit">Create</button>
			</div>
		</form>
	</div>
}

templ AppUpdateForm(values AppParams, success bool, err map[string]error) {
	if (success) {
		<div class="toast toast-start">
			<div class="alert alert-success">
				@icon.Trophy()
				<span>App updated</span>
			</div>
		</div>
	}
	<form
		class="block w-full space-y-2"
		hx-post={ fmt.Sprintf("/console/app/%s/update", values.ID) }
		hx-swap="outerHTML"
	>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Name</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				required
				name="name"
				type="text"
				minlength="2"
				maxlength="50"
				value={ values.Name }
				placeholder="Add name for application"
				class={
					"input input-bordered w-full",
					templ.KV("input-error", err["name"] != nil),
				}
			/>
			if err["name"] != nil {
				<div class="label">
					<span class="label-text-alt text-error">
						{ err["name"].Error() }
					</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Logo</span>
			</div>
			<input
				name="logo_url"
				type="url"
				maxlength="100"
				value={ values.LogoURL }
				placeholder="https://path.to/my_logo.png"
				class={
					"input input-bordered w-full",
					templ.KV("input-error", err["logo"] != nil),
				}
			/>
			<div class="label">
				if err["logo"] != nil {
					<span class="label-text-alt text-error">
						{ err["logo"].Error() }
					</span>
				}
				<span class="label-text-alt">
					If none is set,
					<a
						class="link link-primary"
						target="_blank"
						href="/static/default-logo.png"
					>
						this
					</a> default logo wil be used.
				</span>
			</div>
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Callback URLs</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				required
				name="callback_urls"
				type="text"
				maxlength="1000"
				value={ values.CallbackURLs }
				placeholder="https://example.com, https://localhost:8000"
				class={
					"input input-bordered w-full",
					templ.KV("input-error", err["callback_urls"] != nil),
				}
			/>
			<div class="label">
				if err["callback_urls"] != nil {
					<span class="label-text-alt text-error">
						{ err["callback_urls"].Error() }
					</span>
				}
				<span class="label-text-alt">Comma(,) seperated urls</span>
			</div>
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">ID token expiration</span>
				<span class="label-text-alt text-error text-xl">*</span>
			</div>
			<input
				required
				name="id_token_expiration"
				type="number"
				value={ fmt.Sprintf("%d", values.IDTokenExpiration) }
				min="300"
				max="86400"
				class={
					"input input-bordered w-full", templ.KV("input-error",
						err["id_token_expiration"] != nil),
				}
			/>
			<div class="label">
				if err["id_token_expiration"] != nil {
					<span class="label-text-alt text-error">
						{ err["id_token_expiration"].Error() }
					</span>
				}
				<span class="label-text-alt">In seconds</span>
			</div>
		</label>
		<div class="flex items-center justify-end">
			<button class="btn btn-primary w-full md:w-fit">Update</button>
		</div>
	</form>
}

templ AppCreate() {
	<section class="flex justify-between items-center bg-temple mb-5">
		<div class="hidden w-1/3 justify-center items-center lg:flex">
			@icon.Grid(80)
		</div>
		@AppCreateForm(AppParams{
			IDTokenExpiration: time.Duration(28800),
		}, map[string]error{})
	</section>
}

templ ConfirmDelete() {
	<dialog id="confirm_delete" class="modal modal-bottom sm:modal-middle">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Hello!</h3>
			<p class="py-4">Press ESC key or click the button below to close</p>
			<div class="modal-action">
				<form method="dialog">
					<!-- if there is a button in form, it will close the modal -->
					<button class="btn">Cancel</button>
				</form>
			</div>
		</div>
	</dialog>
}

templ App(app sqlc.Client) {
	@ConfirmDelete()
	<section class="flex justify-between items-center bg-temple mb-5">
		<div class="hidden w-1/3 justify-center items-center lg:flex">
			@icon.Grid(80)
		</div>
		<div class="w-full lg:w-2/3 bg-base-100">
			@AppUpdateForm(AppParams{
				ID:                app.ID,
				Name:              app.Name,
				LogoURL:           app.PictureUrl.String,
				CallbackURLs:      app.CallbackUrls,
				IDTokenExpiration: time.Duration(app.TokenExpiration),
			}, false, map[string]error{})
			<hr class="my-10"/>
			<form
				class="flex items-center justify-around mt-5"
				hx-delete={ fmt.Sprintf("/console/app/%s/delete", app.ID) }
				hx-swap="outerHTML"
			>
				<h2 class="text-3xl font-bold">Danger Zone</h2>
				<button type="submit" class="btn btn-error">Delete App</button>
			</form>
		</div>
	</section>
}

templ AppCreateResult(name, id, secret string) {
	<div role="alert" class="alert alert-warning mb-10">
		@icon.Warning()
		<span>
			WARNING: The client secret will only be displayed <strong>once</strong>.
			It will <strong>not</strong> be stored and <strong>cannot</strong> be
			retrieved. Please make sure to save it.
		</span>
	</div>
	<div class="space-y-4">
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Application Name</span>
			</div>
			<input disabled type="text" value={ name } class="input input-bordered w-full"/>
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Client ID</span>
			</div>
			<input disabled type="text" value={ id } class="input input-bordered w-full"/>
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Client Secret</span>
			</div>
			<input disabled type="text" value={ secret } class="input input-bordered w-full"/>
		</label>
		<div class="flex items-center justify-end">
			<button
				class="btn btn-primary w-full md:w-fit"
				onclick={ downloadAsJSON(name, id, secret) }
			>
				Download Credentials
			</button>
		</div>
	</div>
}

script downloadAsJSON(name, id, secret string) {
	const data = JSON.stringify({
		client_id: id,
		client_secret: secret
	})
	const blob = new Blob([data], { type: "application/json" })
	const url = window.URL.createObjectURL(blob)
	const a = document.createElement('a')
	a.style.display = 'none'
	a.href = url
	a.download = `${name}-credentials.json`
	document.body.appendChild(a)
	a.click()
	window.URL.revokeObjectURL(url)
}

func getPictureURL(url sql.NullString) string {
	if url.Valid {
		return url.String
	}
	return "/static/default-app.svg"
}
